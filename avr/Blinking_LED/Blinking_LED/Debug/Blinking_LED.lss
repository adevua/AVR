
Blinking_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000004a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000009e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  000000ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000010a  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c2  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000130  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000176  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000010  00000000  00000000  00000586  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	02 d0       	rcall	.+4      	; 0x22 <main>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <main>:
{
    
	// Define direction for port pins. "0" - input, "1" - output. Easy to remember! Isn't it?
	// Button on PB1. LED on PB2, others are output too, except PB5.
	// PB5 is RESET.
	DDRB =  0b00011101;
  22:	8d e1       	ldi	r24, 0x1D	; 29
  24:	87 bb       	out	0x17, r24	; 23
	
	// Define pullups resistors to "VCC" or output logic states of pins. 
	// Input "1" - pullup enable, "0" - pullup disable.
	// Output "1" - logic one, "0" - logic zero.
	// PB1, PB5 pullup enable.
	PORTB = 0b00000010;	
  26:	82 e0       	ldi	r24, 0x02	; 2
  28:	88 bb       	out	0x18, r24	; 24
	
	while(1)
    {
		
		// Toggle bit! LED ON/OFF.
		PORTB ^= (1<<PB2);
  2a:	94 e0       	ldi	r25, 0x04	; 4
  2c:	88 b3       	in	r24, 0x18	; 24
  2e:	89 27       	eor	r24, r25
  30:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  32:	2f eb       	ldi	r18, 0xBF	; 191
  34:	34 ed       	ldi	r19, 0xD4	; 212
  36:	81 e0       	ldi	r24, 0x01	; 1
  38:	21 50       	subi	r18, 0x01	; 1
  3a:	30 40       	sbci	r19, 0x00	; 0
  3c:	80 40       	sbci	r24, 0x00	; 0
  3e:	e1 f7       	brne	.-8      	; 0x38 <main+0x16>
  40:	00 c0       	rjmp	.+0      	; 0x42 <__SREG__+0x3>
  42:	00 00       	nop
  44:	f3 cf       	rjmp	.-26     	; 0x2c <main+0xa>

00000046 <_exit>:
  46:	f8 94       	cli

00000048 <__stop_program>:
  48:	ff cf       	rjmp	.-2      	; 0x48 <__stop_program>
