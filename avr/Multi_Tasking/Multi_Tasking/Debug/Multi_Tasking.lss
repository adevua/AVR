
Multi_Tasking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  00000148  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001a3  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000013c  00000000  00000000  00000353  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000016f  00000000  00000000  0000048f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018e  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a2  00000000  00000000  000007fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__vector_6>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a3 36       	cpi	r26, 0x63	; 99
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	48 d0       	rcall	.+144    	; 0xbe <main>
  2e:	50 c0       	rjmp	.+160    	; 0xd0 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <__vector_6>:
volatile uint16_t timer_counter=0;
int8_t flag=0;

#define BLINK_LED 500

ISR (TIM0_COMPA_vect) {
  32:	1f 92       	push	r1
  34:	0f 92       	push	r0
  36:	0f b6       	in	r0, 0x3f	; 63
  38:	0f 92       	push	r0
  3a:	11 24       	eor	r1, r1
  3c:	2f 93       	push	r18
  3e:	8f 93       	push	r24
  40:	9f 93       	push	r25
	
	timer_counter++;
  42:	80 91 61 00 	lds	r24, 0x0061
  46:	90 91 62 00 	lds	r25, 0x0062
  4a:	01 96       	adiw	r24, 0x01	; 1
  4c:	90 93 62 00 	sts	0x0062, r25
  50:	80 93 61 00 	sts	0x0061, r24
	
	if (timer_counter >= BLINK_LED)
  54:	80 91 61 00 	lds	r24, 0x0061
  58:	90 91 62 00 	lds	r25, 0x0062
  5c:	84 3f       	cpi	r24, 0xF4	; 244
  5e:	91 40       	sbci	r25, 0x01	; 1
  60:	38 f0       	brcs	.+14     	; 0x70 <__SREG__+0x31>
	{
		timer_counter=0;
  62:	10 92 62 00 	sts	0x0062, r1
  66:	10 92 61 00 	sts	0x0061, r1
		flag=1;
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	80 93 60 00 	sts	0x0060, r24
	}
	
}
  70:	9f 91       	pop	r25
  72:	8f 91       	pop	r24
  74:	2f 91       	pop	r18
  76:	0f 90       	pop	r0
  78:	0f be       	out	0x3f, r0	; 63
  7a:	0f 90       	pop	r0
  7c:	1f 90       	pop	r1
  7e:	18 95       	reti

00000080 <setup>:

void setup () {
	
	// LEDs on PB2, PB3.
	DDRB =  0b00011101;
  80:	8d e1       	ldi	r24, 0x1D	; 29
  82:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00100010;
  84:	82 e2       	ldi	r24, 0x22	; 34
  86:	88 bb       	out	0x18, r24	; 24
	
	// Analog comparator OFF.
	ACSR |= (1 << ACD);
  88:	47 9a       	sbi	0x08, 7	; 8
	
	// Start timer T0 with prescaler 8.
	TCCR0B |= (1<<CS01);
  8a:	83 b7       	in	r24, 0x33	; 51
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	83 bf       	out	0x33, r24	; 51
	
	// Enable time T0 overflow interrupt.
	TIMSK0 |= (1<<OCIE0A);
  90:	89 b7       	in	r24, 0x39	; 57
  92:	84 60       	ori	r24, 0x04	; 4
  94:	89 bf       	out	0x39, r24	; 57
	
	// Enable CTC Mode.
	TCCR0A |= (1<<WGM01);
  96:	8f b5       	in	r24, 0x2f	; 47
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	8f bd       	out	0x2f, r24	; 47
	
	// T0 will overflow each 1 ms.
	OCR0A = 150;
  9c:	86 e9       	ldi	r24, 0x96	; 150
  9e:	86 bf       	out	0x36, r24	; 54
	
	// Reset timer T0 flags.
	TIFR0 = 0;
  a0:	18 be       	out	0x38, r1	; 56
  a2:	08 95       	ret

000000a4 <Blinking>:
	
}

void Blinking () {
	 
	 if (flag) 
  a4:	80 91 60 00 	lds	r24, 0x0060
  a8:	88 23       	and	r24, r24
  aa:	41 f0       	breq	.+16     	; 0xbc <Blinking+0x18>
	 {
		 // Toggle LED
		 PORTB ^= (1<<PB3);
  ac:	98 b3       	in	r25, 0x18	; 24
  ae:	88 e0       	ldi	r24, 0x08	; 8
  b0:	89 27       	eor	r24, r25
  b2:	88 bb       	out	0x18, r24	; 24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  b4:	f8 94       	cli
		 
		 // Interrupt protection before accessing variable
		 ATOMIC_BLOCK(ATOMIC_FORCEON)
		 {
			 flag=0;
  b6:	10 92 60 00 	sts	0x0060, r1
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
  ba:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
  bc:	08 95       	ret

000000be <main>:
	
}

int main(void)
{
	setup ();
  be:	e0 df       	rcall	.-64     	; 0x80 <setup>
	sei();
  c0:	78 94       	sei
	
    while(1)
    {
       
		Blinking();
  c2:	f0 df       	rcall	.-32     	; 0xa4 <Blinking>
		
		if (!(PINB & (1<<PB1)))
  c4:	b1 99       	sbic	0x16, 1	; 22
  c6:	02 c0       	rjmp	.+4      	; 0xcc <main+0xe>
		{
			PORTB |= (1<<PB2);
  c8:	c2 9a       	sbi	0x18, 2	; 24
  ca:	fb cf       	rjmp	.-10     	; 0xc2 <main+0x4>
		}
		else
		{
			PORTB &=~(1<<PB2);
  cc:	c2 98       	cbi	0x18, 2	; 24
  ce:	f9 cf       	rjmp	.-14     	; 0xc2 <main+0x4>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
