
Double_Click.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  0000013a  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002b8  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000161  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001b6  00000000  00000000  000005d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000084  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001f5  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000004e  00000000  00000000  00000a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00000a53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a8 36       	cpi	r26, 0x68	; 104
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	22 d0       	rcall	.+68     	; 0x72 <main>
  2e:	49 c0       	rjmp	.+146    	; 0xc2 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <setup>:
	if ((PINB & (1<<PB1)) && (latch == 1))
	{
		latch=0;
	}
	
	if (pulse_counter > 2)
  32:	8d e1       	ldi	r24, 0x1D	; 29
  34:	87 bb       	out	0x17, r24	; 23
  36:	82 e2       	ldi	r24, 0x22	; 34
  38:	88 bb       	out	0x18, r24	; 24
	{
		pulse_counter=0;
  3a:	47 9a       	sbi	0x08, 7	; 8
  3c:	83 b7       	in	r24, 0x33	; 51
		PORTB=0;
  3e:	81 60       	ori	r24, 0x01	; 1
  40:	83 bf       	out	0x33, r24	; 51
	
	// Start timer T0.
	TCCR0B |= (1<<CS00);
	
	// Reset timer T0 flags.
	TIFR0 = 0;
  42:	18 be       	out	0x38, r1	; 56
  44:	08 95       	ret

00000046 <one_click>:
	
}

void one_click () {
	
	PORTB ^= (1<<PB2);
  46:	98 b3       	in	r25, 0x18	; 24
  48:	84 e0       	ldi	r24, 0x04	; 4
  4a:	89 27       	eor	r24, r25
  4c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4e:	8f e2       	ldi	r24, 0x2F	; 47
  50:	95 e7       	ldi	r25, 0x75	; 117
  52:	01 97       	sbiw	r24, 0x01	; 1
  54:	f1 f7       	brne	.-4      	; 0x52 <one_click+0xc>
  56:	00 c0       	rjmp	.+0      	; 0x58 <one_click+0x12>
  58:	00 00       	nop
  5a:	08 95       	ret

0000005c <double_click>:
	
}

void double_click () {
	
	PORTB ^= (1<<PB3);
  5c:	98 b3       	in	r25, 0x18	; 24
  5e:	88 e0       	ldi	r24, 0x08	; 8
  60:	89 27       	eor	r24, r25
  62:	88 bb       	out	0x18, r24	; 24
  64:	8f e2       	ldi	r24, 0x2F	; 47
  66:	95 e7       	ldi	r25, 0x75	; 117
  68:	01 97       	sbiw	r24, 0x01	; 1
  6a:	f1 f7       	brne	.-4      	; 0x68 <double_click+0xc>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <double_click+0x12>
  6e:	00 00       	nop
  70:	08 95       	ret

00000072 <main>:
}

int main(void)
{
	
	setup();
  72:	df df       	rcall	.-66     	; 0x32 <setup>
	while(1)
	{
		
		// check_button();
		// capture_t1_t2();
		t1 = 10;
  74:	0f 2e       	mov	r0, r31
  76:	fa e0       	ldi	r31, 0x0A	; 10
  78:	ef 2e       	mov	r14, r31
  7a:	f1 2c       	mov	r15, r1
  7c:	f0 2d       	mov	r31, r0
		t2 = 25;
  7e:	09 e1       	ldi	r16, 0x19	; 25
  80:	10 e0       	ldi	r17, 0x00	; 0
		
		delta_T = calculation_delta (t1,t2);
  82:	cf e0       	ldi	r28, 0x0F	; 15
  84:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{
		
		// check_button();
		// capture_t1_t2();
		t1 = 10;
  86:	f0 92 63 00 	sts	0x0063, r15
  8a:	e0 92 62 00 	sts	0x0062, r14
		t2 = 25;
  8e:	10 93 61 00 	sts	0x0061, r17
  92:	00 93 60 00 	sts	0x0060, r16
		
		delta_T = calculation_delta (t1,t2);
  96:	d0 93 67 00 	sts	0x0067, r29
  9a:	c0 93 66 00 	sts	0x0066, r28
		
		while (delta_T > 10)
		{
			one_click();
  9e:	d3 df       	rcall	.-90     	; 0x46 <one_click>
		t1 = 10;
		t2 = 25;
		
		delta_T = calculation_delta (t1,t2);
		
		while (delta_T > 10)
  a0:	80 91 66 00 	lds	r24, 0x0066
  a4:	90 91 67 00 	lds	r25, 0x0067
  a8:	8b 30       	cpi	r24, 0x0B	; 11
  aa:	91 05       	cpc	r25, r1
  ac:	c4 f7       	brge	.-16     	; 0x9e <main+0x2c>
		{
			one_click();
		}
		
		while (delta_T < 10)
  ae:	0a 97       	sbiw	r24, 0x0a	; 10
  b0:	54 f7       	brge	.-44     	; 0x86 <main+0x14>
		{
			double_click();
  b2:	d4 df       	rcall	.-88     	; 0x5c <double_click>
		while (delta_T > 10)
		{
			one_click();
		}
		
		while (delta_T < 10)
  b4:	80 91 66 00 	lds	r24, 0x0066
  b8:	90 91 67 00 	lds	r25, 0x0067
  bc:	0a 97       	sbiw	r24, 0x0a	; 10
  be:	cc f3       	brlt	.-14     	; 0xb2 <__stack+0x13>
  c0:	e2 cf       	rjmp	.-60     	; 0x86 <main+0x14>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
