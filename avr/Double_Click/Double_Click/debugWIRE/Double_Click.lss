
Double_Click.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  000001f2  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000022d  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000135  00000000  00000000  0000049f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001bd  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000098  00000000  00000000  00000794  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000008f  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00000ac3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__vector_6>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a8 36       	cpi	r26, 0x68	; 104
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	91 d0       	rcall	.+290    	; 0x150 <main>
  2e:	a5 c0       	rjmp	.+330    	; 0x17a <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <__vector_6>:
unsigned char one_click_state=0; 
unsigned char double_click_state=0;

#define max_double_click 300 // ms. Usually a human reaction is near 300-350 ms.

ISR (TIM0_COMPA_vect) {
  32:	1f 92       	push	r1
  34:	0f 92       	push	r0
  36:	0f b6       	in	r0, 0x3f	; 63
  38:	0f 92       	push	r0
  3a:	11 24       	eor	r1, r1
  3c:	8f 93       	push	r24
  3e:	9f 93       	push	r25
	timer_counter++;
  40:	80 91 66 00 	lds	r24, 0x0066
  44:	90 91 67 00 	lds	r25, 0x0067
  48:	01 96       	adiw	r24, 0x01	; 1
  4a:	90 93 67 00 	sts	0x0067, r25
  4e:	80 93 66 00 	sts	0x0066, r24
}
  52:	9f 91       	pop	r25
  54:	8f 91       	pop	r24
  56:	0f 90       	pop	r0
  58:	0f be       	out	0x3f, r0	; 63
  5a:	0f 90       	pop	r0
  5c:	1f 90       	pop	r1
  5e:	18 95       	reti

00000060 <setup>:

void setup () {
	
	// LEDs on PB2, PB3.
	DDRB =  0b00011101;
  60:	8d e1       	ldi	r24, 0x1D	; 29
  62:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00100010;
  64:	82 e2       	ldi	r24, 0x22	; 34
  66:	88 bb       	out	0x18, r24	; 24
	
	// Analog comparator OFF.
	ACSR |= (1 << ACD); 
  68:	47 9a       	sbi	0x08, 7	; 8
	
	// Start timer T0 with prescaler 8.
	TCCR0B |= (1<<CS01);
  6a:	83 b7       	in	r24, 0x33	; 51
  6c:	82 60       	ori	r24, 0x02	; 2
  6e:	83 bf       	out	0x33, r24	; 51
	
	// Enable time T0 overflow interrupt.
	TIMSK0 |= (1<<OCIE0A);
  70:	89 b7       	in	r24, 0x39	; 57
  72:	84 60       	ori	r24, 0x04	; 4
  74:	89 bf       	out	0x39, r24	; 57
	
	// Enable CTC Mode.
	TCCR0A |= (1<<WGM01);
  76:	8f b5       	in	r24, 0x2f	; 47
  78:	82 60       	ori	r24, 0x02	; 2
  7a:	8f bd       	out	0x2f, r24	; 47
	
	// T0 will overflow each 1 ms.
	OCR0A = 150;
  7c:	86 e9       	ldi	r24, 0x96	; 150
  7e:	86 bf       	out	0x36, r24	; 54
	
	// Reset timer T0 flags.
	TIFR0 = 0;
  80:	18 be       	out	0x38, r1	; 56
  82:	08 95       	ret

00000084 <one_click>:
	
}

void one_click () {
	PORTB ^= (1<<PB2);
  84:	98 b3       	in	r25, 0x18	; 24
  86:	84 e0       	ldi	r24, 0x04	; 4
  88:	89 27       	eor	r24, r25
  8a:	88 bb       	out	0x18, r24	; 24
  8c:	08 95       	ret

0000008e <double_click>:
}

void double_click () {
	PORTB ^= (1<<PB3);
  8e:	98 b3       	in	r25, 0x18	; 24
  90:	88 e0       	ldi	r24, 0x08	; 8
  92:	89 27       	eor	r24, r25
  94:	88 bb       	out	0x18, r24	; 24
  96:	08 95       	ret

00000098 <check_button>:
}

void check_button () {
	
	if (!(PINB & (1<<PB1)))
  98:	b1 99       	sbic	0x16, 1	; 22
  9a:	2e c0       	rjmp	.+92     	; 0xf8 <__stack+0x59>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	8f e6       	ldi	r24, 0x6F	; 111
  9e:	97 e1       	ldi	r25, 0x17	; 23
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <__stack+0x1>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <__stack+0x7>
  a6:	00 00       	nop
	{
		_delay_ms(20);
			
			if (!(PINB & (1<<PB1)) && (latch == 0))
  a8:	b1 99       	sbic	0x16, 1	; 22
  aa:	26 c0       	rjmp	.+76     	; 0xf8 <__stack+0x59>
  ac:	80 91 63 00 	lds	r24, 0x0063
  b0:	81 11       	cpse	r24, r1
  b2:	22 c0       	rjmp	.+68     	; 0xf8 <__stack+0x59>
			{
				latch=1;			
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	80 93 63 00 	sts	0x0063, r24
				pulse_counter++;
  ba:	80 91 62 00 	lds	r24, 0x0062
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	80 93 62 00 	sts	0x0062, r24
			
				if (pulse_counter == 1)
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	51 f4       	brne	.+20     	; 0xdc <__stack+0x3d>
				{
					cli(); // Disable interrupts.	
  c8:	f8 94       	cli
					timer_counter=0;
  ca:	10 92 67 00 	sts	0x0067, r1
  ce:	10 92 66 00 	sts	0x0066, r1
					sei(); // Enable interrupts.
  d2:	78 94       	sei
					t2=0;
  d4:	10 92 65 00 	sts	0x0065, r1
  d8:	10 92 64 00 	sts	0x0064, r1
				}
		
				if (pulse_counter == 2)
  dc:	80 91 62 00 	lds	r24, 0x0062
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	51 f4       	brne	.+20     	; 0xf8 <__stack+0x59>
				{
					pulse_counter=0;
  e4:	10 92 62 00 	sts	0x0062, r1
					t2=timer_counter;
  e8:	80 91 66 00 	lds	r24, 0x0066
  ec:	90 91 67 00 	lds	r25, 0x0067
  f0:	90 93 65 00 	sts	0x0065, r25
  f4:	80 93 64 00 	sts	0x0064, r24
				}
			}
	}
	
	if ((PINB & (1<<PB1)) && (latch == 1))
  f8:	b1 9b       	sbis	0x16, 1	; 22
  fa:	06 c0       	rjmp	.+12     	; 0x108 <__stack+0x69>
  fc:	80 91 63 00 	lds	r24, 0x0063
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	11 f4       	brne	.+4      	; 0x108 <__stack+0x69>
	{
		latch=0;
 104:	10 92 63 00 	sts	0x0063, r1
 108:	08 95       	ret

0000010a <double_click_capture>:
	
}

void double_click_capture () {

	if ((t2 <= max_double_click) && (t2 != 0))
 10a:	80 91 64 00 	lds	r24, 0x0064
 10e:	90 91 65 00 	lds	r25, 0x0065
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	8c 32       	cpi	r24, 0x2C	; 44
 116:	91 40       	sbci	r25, 0x01	; 1
 118:	38 f4       	brcc	.+14     	; 0x128 <double_click_capture+0x1e>
	{
		double_click_state=1;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 60 00 	sts	0x0060, r24
		t2=0;
 120:	10 92 65 00 	sts	0x0065, r1
 124:	10 92 64 00 	sts	0x0064, r1
	}
	
	if (timer_counter == max_double_click)
 128:	80 91 66 00 	lds	r24, 0x0066
 12c:	90 91 67 00 	lds	r25, 0x0067
 130:	8c 32       	cpi	r24, 0x2C	; 44
 132:	91 40       	sbci	r25, 0x01	; 1
 134:	61 f4       	brne	.+24     	; 0x14e <double_click_capture+0x44>
	{
		timer_counter=0;
 136:	10 92 67 00 	sts	0x0067, r1
 13a:	10 92 66 00 	sts	0x0066, r1
		if (pulse_counter == 1)
 13e:	80 91 62 00 	lds	r24, 0x0062
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	21 f4       	brne	.+8      	; 0x14e <double_click_capture+0x44>
		{
			pulse_counter=0;
 146:	10 92 62 00 	sts	0x0062, r1
			one_click_state=1;
 14a:	80 93 61 00 	sts	0x0061, r24
 14e:	08 95       	ret

00000150 <main>:
}

int main(void)
{
	
	setup();
 150:	87 df       	rcall	.-242    	; 0x60 <setup>
	sei();
 152:	78 94       	sei
	
	while(1)
	{
		check_button();
 154:	a1 df       	rcall	.-190    	; 0x98 <check_button>
		double_click_capture();
 156:	d9 df       	rcall	.-78     	; 0x10a <double_click_capture>
		
	
		
		if (double_click_state == 1)
 158:	80 91 60 00 	lds	r24, 0x0060
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	19 f4       	brne	.+6      	; 0x166 <main+0x16>
		{
			double_click();
 160:	96 df       	rcall	.-212    	; 0x8e <double_click>
			double_click_state = 0;
 162:	10 92 60 00 	sts	0x0060, r1
		}
		
		
		if (one_click_state == 1)
 166:	80 91 61 00 	lds	r24, 0x0061
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	99 f7       	brne	.-26     	; 0x154 <main+0x4>
		{
			one_click();
 16e:	8a df       	rcall	.-236    	; 0x84 <one_click>
			cli();
 170:	f8 94       	cli
			one_click_state = 0;
 172:	10 92 61 00 	sts	0x0061, r1
			sei();
 176:	78 94       	sei
 178:	ed cf       	rjmp	.-38     	; 0x154 <main+0x4>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
