
Double_Click.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000178  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  000001ec  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000022d  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000135  00000000  00000000  00000499  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001bc  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000009c  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__vector_6>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a8 36       	cpi	r26, 0x68	; 104
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	90 d0       	rcall	.+288    	; 0x14e <main>
  2e:	a2 c0       	rjmp	.+324    	; 0x174 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <__vector_6>:
unsigned char one_click_state=0; 
unsigned char double_click_state=0;

#define max_double_click 400 // ms. Usually a human reaction is near 300-350 ms.

ISR (TIM0_COMPA_vect) {
  32:	1f 92       	push	r1
  34:	0f 92       	push	r0
  36:	0f b6       	in	r0, 0x3f	; 63
  38:	0f 92       	push	r0
  3a:	11 24       	eor	r1, r1
  3c:	2f 93       	push	r18
  3e:	8f 93       	push	r24
  40:	9f 93       	push	r25
	
	timer_counter++;
  42:	80 91 66 00 	lds	r24, 0x0066
  46:	90 91 67 00 	lds	r25, 0x0067
  4a:	01 96       	adiw	r24, 0x01	; 1
  4c:	90 93 67 00 	sts	0x0067, r25
  50:	80 93 66 00 	sts	0x0066, r24
	if (timer_counter == max_double_click)
  54:	80 91 66 00 	lds	r24, 0x0066
  58:	90 91 67 00 	lds	r25, 0x0067
  5c:	80 39       	cpi	r24, 0x90	; 144
  5e:	91 40       	sbci	r25, 0x01	; 1
  60:	61 f4       	brne	.+24     	; 0x7a <__SREG__+0x3b>
	{
		
		timer_counter=0;
  62:	10 92 67 00 	sts	0x0067, r1
  66:	10 92 66 00 	sts	0x0066, r1
		
		if (pulse_counter == 1)
  6a:	80 91 62 00 	lds	r24, 0x0062
  6e:	81 30       	cpi	r24, 0x01	; 1
  70:	21 f4       	brne	.+8      	; 0x7a <__SREG__+0x3b>
		{
			pulse_counter=0;
  72:	10 92 62 00 	sts	0x0062, r1
			one_click_state=1;
  76:	80 93 61 00 	sts	0x0061, r24
		}
		
	}
	
}
  7a:	9f 91       	pop	r25
  7c:	8f 91       	pop	r24
  7e:	2f 91       	pop	r18
  80:	0f 90       	pop	r0
  82:	0f be       	out	0x3f, r0	; 63
  84:	0f 90       	pop	r0
  86:	1f 90       	pop	r1
  88:	18 95       	reti

0000008a <setup>:

void setup () {
	
	// LEDs on PB2, PB3.
	DDRB =  0b00011101;
  8a:	8d e1       	ldi	r24, 0x1D	; 29
  8c:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00100010;
  8e:	82 e2       	ldi	r24, 0x22	; 34
  90:	88 bb       	out	0x18, r24	; 24
	
	// Analog comparator OFF.
	ACSR |= (1 << ACD); 
  92:	47 9a       	sbi	0x08, 7	; 8
	
	// Start timer T0 with prescaler 8.
	TCCR0B |= (1<<CS01);
  94:	83 b7       	in	r24, 0x33	; 51
  96:	82 60       	ori	r24, 0x02	; 2
  98:	83 bf       	out	0x33, r24	; 51
	
	// Enable time T0 overflow interrupt.
	TIMSK0 |= (1<<OCIE0A);
  9a:	89 b7       	in	r24, 0x39	; 57
  9c:	84 60       	ori	r24, 0x04	; 4
  9e:	89 bf       	out	0x39, r24	; 57
	
	// Enable CTC Mode.
	TCCR0A |= (1<<WGM01);
  a0:	8f b5       	in	r24, 0x2f	; 47
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	8f bd       	out	0x2f, r24	; 47
	
	// T0 will overflow each 1 ms.
	OCR0A = 150;
  a6:	86 e9       	ldi	r24, 0x96	; 150
  a8:	86 bf       	out	0x36, r24	; 54
	
	// Reset timer T0 flags.
	TIFR0 = 0;
  aa:	18 be       	out	0x38, r1	; 56
  ac:	08 95       	ret

000000ae <one_click>:
	
}

void one_click () {
	PORTB ^= (1<<PB2);
  ae:	98 b3       	in	r25, 0x18	; 24
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	89 27       	eor	r24, r25
  b4:	88 bb       	out	0x18, r24	; 24
  b6:	08 95       	ret

000000b8 <double_click>:
}

void double_click () {
	PORTB ^= (1<<PB3);
  b8:	98 b3       	in	r25, 0x18	; 24
  ba:	88 e0       	ldi	r24, 0x08	; 8
  bc:	89 27       	eor	r24, r25
  be:	88 bb       	out	0x18, r24	; 24
  c0:	08 95       	ret

000000c2 <check_button>:
}

void check_button () {
	
	if (!(PINB & (1<<PB1)))
  c2:	b1 99       	sbic	0x16, 1	; 22
  c4:	2b c0       	rjmp	.+86     	; 0x11c <check_button+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	8f e6       	ldi	r24, 0x6F	; 111
  c8:	97 e1       	ldi	r25, 0x17	; 23
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <check_button+0x8>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <check_button+0xe>
  d0:	00 00       	nop
	{
		_delay_ms(20);
			
			if (!(PINB & (1<<PB1)) && (latch == 0))
  d2:	b1 99       	sbic	0x16, 1	; 22
  d4:	23 c0       	rjmp	.+70     	; 0x11c <check_button+0x5a>
  d6:	80 91 63 00 	lds	r24, 0x0063
  da:	81 11       	cpse	r24, r1
  dc:	1f c0       	rjmp	.+62     	; 0x11c <check_button+0x5a>
			{
				latch=1;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 63 00 	sts	0x0063, r24
				pulse_counter++;
  e4:	80 91 62 00 	lds	r24, 0x0062
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	80 93 62 00 	sts	0x0062, r24
			
				if (pulse_counter == 1)
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	49 f4       	brne	.+18     	; 0x104 <check_button+0x42>
				{
					timer_counter=0;
  f2:	10 92 67 00 	sts	0x0067, r1
  f6:	10 92 66 00 	sts	0x0066, r1
					t2=0;
  fa:	10 92 65 00 	sts	0x0065, r1
  fe:	10 92 64 00 	sts	0x0064, r1
 102:	0c c0       	rjmp	.+24     	; 0x11c <check_button+0x5a>
				}
		
				if (pulse_counter == 2)
 104:	82 30       	cpi	r24, 0x02	; 2
 106:	51 f4       	brne	.+20     	; 0x11c <check_button+0x5a>
				{
					pulse_counter=0;
 108:	10 92 62 00 	sts	0x0062, r1
					t2=timer_counter;
 10c:	80 91 66 00 	lds	r24, 0x0066
 110:	90 91 67 00 	lds	r25, 0x0067
 114:	90 93 65 00 	sts	0x0065, r25
 118:	80 93 64 00 	sts	0x0064, r24
				}
			}
	}
	
	if ((PINB & (1<<PB1)) && (latch == 1))
 11c:	b1 9b       	sbis	0x16, 1	; 22
 11e:	06 c0       	rjmp	.+12     	; 0x12c <check_button+0x6a>
 120:	80 91 63 00 	lds	r24, 0x0063
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	11 f4       	brne	.+4      	; 0x12c <check_button+0x6a>
	{
		latch=0;
 128:	10 92 63 00 	sts	0x0063, r1
 12c:	08 95       	ret

0000012e <double_click_capture>:
	
}

void double_click_capture () {

	if ((t2 <= max_double_click) && (t2 != 0))
 12e:	80 91 64 00 	lds	r24, 0x0064
 132:	90 91 65 00 	lds	r25, 0x0065
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	80 39       	cpi	r24, 0x90	; 144
 13a:	91 40       	sbci	r25, 0x01	; 1
 13c:	38 f4       	brcc	.+14     	; 0x14c <double_click_capture+0x1e>
	{
		double_click_state=1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 60 00 	sts	0x0060, r24
		t2=0;
 144:	10 92 65 00 	sts	0x0065, r1
 148:	10 92 64 00 	sts	0x0064, r1
 14c:	08 95       	ret

0000014e <main>:
}

int main(void)
{
	
	setup();
 14e:	9d df       	rcall	.-198    	; 0x8a <setup>
	sei();
 150:	78 94       	sei
	
	while(1)
	{
		check_button();
 152:	b7 df       	rcall	.-146    	; 0xc2 <check_button>
		double_click_capture();
 154:	ec df       	rcall	.-40     	; 0x12e <double_click_capture>
		
		if (double_click_state == 1)
 156:	80 91 60 00 	lds	r24, 0x0060
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	19 f4       	brne	.+6      	; 0x164 <main+0x16>
		{
			double_click();
 15e:	ac df       	rcall	.-168    	; 0xb8 <double_click>
			double_click_state = 0;
 160:	10 92 60 00 	sts	0x0060, r1
		}
		
		
		if (one_click_state == 1)
 164:	80 91 61 00 	lds	r24, 0x0061
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	99 f7       	brne	.-26     	; 0x152 <main+0x4>
		{
			one_click();
 16c:	a0 df       	rcall	.-192    	; 0xae <one_click>
			one_click_state = 0;
 16e:	10 92 61 00 	sts	0x0061, r1
 172:	ef cf       	rjmp	.-34     	; 0x152 <main+0x4>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
