
Button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000060  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000b4  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  000000e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000167  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e5  00000000  00000000  00000273  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000013a  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000016a  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000018  00000000  00000000  00000632  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	07 d0       	rcall	.+14     	; 0x2c <main>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <setup>:
#define LED_ON PORTB |= (1<<PB2)
#define LED_OFF PORTB &= ~(1<<PB2)

// Simple configuration function.
void setup () {
	DDRB =  0b00011101;
  22:	8d e1       	ldi	r24, 0x1D	; 29
  24:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00100010;	
  26:	82 e2       	ldi	r24, 0x22	; 34
  28:	88 bb       	out	0x18, r24	; 24
  2a:	08 95       	ret

0000002c <main>:
}

int main(void)
{
	// Let's run our configuration function here
    setup ();
  2c:	fa df       	rcall	.-12     	; 0x22 <setup>
    {
	
	// Button is on PB1 with internal pullup resistor to VCC, when we press the button a logic level will changed from 1 to 0.
	// Conditions in parentheses of the function require a logic "True" for executing code in the "{}". 
	// (PINB & (1<<PB1) gives "1" and it's a logic true, but button not pressed that's why we use "!" to reverse it.
	if (!(PINB & (1<<PB1)))
  2e:	b1 99       	sbic	0x16, 1	; 22
  30:	fe cf       	rjmp	.-4      	; 0x2e <main+0x2>
        {
			LED_ON; // This is the place where #define works.
  32:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  34:	2f e5       	ldi	r18, 0x5F	; 95
  36:	8a ee       	ldi	r24, 0xEA	; 234
  38:	90 e0       	ldi	r25, 0x00	; 0
  3a:	21 50       	subi	r18, 0x01	; 1
  3c:	80 40       	sbci	r24, 0x00	; 0
  3e:	90 40       	sbci	r25, 0x00	; 0
  40:	e1 f7       	brne	.-8      	; 0x3a <main+0xe>
  42:	00 c0       	rjmp	.+0      	; 0x44 <__SREG__+0x5>
  44:	00 00       	nop
			_delay_ms(250);
			LED_OFF;
  46:	c2 98       	cbi	0x18, 2	; 24
  48:	2f e5       	ldi	r18, 0x5F	; 95
  4a:	8a ee       	ldi	r24, 0xEA	; 234
  4c:	90 e0       	ldi	r25, 0x00	; 0
  4e:	21 50       	subi	r18, 0x01	; 1
  50:	80 40       	sbci	r24, 0x00	; 0
  52:	90 40       	sbci	r25, 0x00	; 0
  54:	e1 f7       	brne	.-8      	; 0x4e <__SREG__+0xf>
  56:	00 c0       	rjmp	.+0      	; 0x58 <__SREG__+0x19>
  58:	00 00       	nop
  5a:	e9 cf       	rjmp	.-46     	; 0x2e <main+0x2>

0000005c <_exit>:
  5c:	f8 94       	cli

0000005e <__stop_program>:
  5e:	ff cf       	rjmp	.-2      	; 0x5e <__stop_program>
