
Interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000177  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000126  00000000  00000000  000002cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000015e  00000000  00000000  000003f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000068  00000000  00000000  00000550  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000191  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000049  00000000  00000000  00000749  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00000792  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__vector_1>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a0 36       	cpi	r26, 0x60	; 96
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	2f d0       	rcall	.+94     	; 0x8c <main>
  2e:	32 c0       	rjmp	.+100    	; 0x94 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <__vector_1>:
// Interruption is a way to implement multitasking.


// This is an interrupt vector "External Interrupt Request 0". All vectors look at the table 9-1, page 45.
// When the interrupt occur, this code will execute.
ISR (INT0_vect) {
  32:	1f 92       	push	r1
  34:	0f 92       	push	r0
  36:	0f b6       	in	r0, 0x3f	; 63
  38:	0f 92       	push	r0
  3a:	11 24       	eor	r1, r1
  3c:	8f 93       	push	r24
  3e:	9f 93       	push	r25
	
	// For hardware debounce reduction add in parallel to the button a capacitor with 100n of value.
	PORTB ^= (1<<PB3);
  40:	98 b3       	in	r25, 0x18	; 24
  42:	88 e0       	ldi	r24, 0x08	; 8
  44:	89 27       	eor	r24, r25
  46:	88 bb       	out	0x18, r24	; 24
	
	*/
	
	/* ------- Software debounce without delay function | End ------- */
	
}
  48:	9f 91       	pop	r25
  4a:	8f 91       	pop	r24
  4c:	0f 90       	pop	r0
  4e:	0f be       	out	0x3f, r0	; 63
  50:	0f 90       	pop	r0
  52:	1f 90       	pop	r1
  54:	18 95       	reti

00000056 <setup>:

void setup () {
	
	DDRB =  0b00011101;
  56:	8d e1       	ldi	r24, 0x1D	; 29
  58:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00100010;
  5a:	82 e2       	ldi	r24, 0x22	; 34
  5c:	88 bb       	out	0x18, r24	; 24
	
	// General Interrupt Mask Register. The bit 6 turn ON Interrupt Request on INT0 pin of microcontroller.
	GIMSK =	(1<<INT0);
  5e:	80 e4       	ldi	r24, 0x40	; 64
  60:	8b bf       	out	0x3b, r24	; 59
	
	// MCU Control Register contains control bits for interrupt sense control.
	// The falling edge of INT0 generates an interrupt request. All settings look at the table 9-2, page 47.
	MCUCR |= (1<<ISC01);
  62:	85 b7       	in	r24, 0x35	; 53
  64:	82 60       	ori	r24, 0x02	; 2
  66:	85 bf       	out	0x35, r24	; 53
	MCUCR &=~(1<<ISC00); 
  68:	85 b7       	in	r24, 0x35	; 53
  6a:	8e 7f       	andi	r24, 0xFE	; 254
  6c:	85 bf       	out	0x35, r24	; 53
  6e:	08 95       	ret

00000070 <blink>:

}

void blink () {
	PORTB ^= (1<<PB2);
  70:	98 b3       	in	r25, 0x18	; 24
  72:	84 e0       	ldi	r24, 0x04	; 4
  74:	89 27       	eor	r24, r25
  76:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	2f eb       	ldi	r18, 0xBF	; 191
  7a:	84 ed       	ldi	r24, 0xD4	; 212
  7c:	91 e0       	ldi	r25, 0x01	; 1
  7e:	21 50       	subi	r18, 0x01	; 1
  80:	80 40       	sbci	r24, 0x00	; 0
  82:	90 40       	sbci	r25, 0x00	; 0
  84:	e1 f7       	brne	.-8      	; 0x7e <blink+0xe>
  86:	00 c0       	rjmp	.+0      	; 0x88 <blink+0x18>
  88:	00 00       	nop
  8a:	08 95       	ret

0000008c <main>:
	_delay_ms(500);
}

int main(void)
{
	setup ();
  8c:	e4 df       	rcall	.-56     	; 0x56 <setup>
	
	// The interrupts should globally enabled in the code. By default, interrupts are globally switched off.
	// The global interrupt flag is maintained in the "I" bit of the status register (SREG). Page 9.
	// cli(); disables all interrupts by clearing the global interrupt mask. 
	sei ();
  8e:	78 94       	sei
	
    while(1)
    {
        blink();
  90:	ef df       	rcall	.-34     	; 0x70 <blink>
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0x4>

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
