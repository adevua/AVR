
Blinking_Duty_Ratio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  0000013c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000141  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000a6  00000000  00000000  000002e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000fa  00000000  00000000  0000038b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000488  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000019f  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000056  00000000  00000000  00000697  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000006ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__vector_6>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a3 36       	cpi	r26, 0x63	; 99
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	47 d0       	rcall	.+142    	; 0xbc <main>
  2e:	4a c0       	rjmp	.+148    	; 0xc4 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <__vector_6>:
#define set(x)	|= (1<<x)
#define clr(x)	&=~(1<<x)

#define LED PB2

ISR (TIM0_COMPA_vect) {
  32:	1f 92       	push	r1
  34:	0f 92       	push	r0
  36:	0f b6       	in	r0, 0x3f	; 63
  38:	0f 92       	push	r0
  3a:	11 24       	eor	r1, r1
  3c:	2f 93       	push	r18
  3e:	8f 93       	push	r24
  40:	9f 93       	push	r25
	
	timer_counter++;
  42:	80 91 61 00 	lds	r24, 0x0061
  46:	90 91 62 00 	lds	r25, 0x0062
  4a:	01 96       	adiw	r24, 0x01	; 1
  4c:	90 93 62 00 	sts	0x0062, r25
  50:	80 93 61 00 	sts	0x0061, r24
	
	if (timer_counter >= BLINK_LED_OFF_TIME)
  54:	84 38       	cpi	r24, 0x84	; 132
  56:	23 e0       	ldi	r18, 0x03	; 3
  58:	92 07       	cpc	r25, r18
  5a:	28 f0       	brcs	.+10     	; 0x66 <__SREG__+0x27>
	{
		timer_counter=0;
  5c:	10 92 62 00 	sts	0x0062, r1
  60:	10 92 61 00 	sts	0x0061, r1
  64:	03 c0       	rjmp	.+6      	; 0x6c <__SREG__+0x2d>
	}
	
	if (timer_counter <= BLINK_LED_ON_TIME)
  66:	85 36       	cpi	r24, 0x65	; 101
  68:	91 05       	cpc	r25, r1
  6a:	20 f4       	brcc	.+8      	; 0x74 <__SREG__+0x35>
	{
		led_on_flag=1;
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	80 93 60 00 	sts	0x0060, r24
  72:	02 c0       	rjmp	.+4      	; 0x78 <__SREG__+0x39>
	}
	else
	{
		led_on_flag=0;
  74:	10 92 60 00 	sts	0x0060, r1
	}
	
}
  78:	9f 91       	pop	r25
  7a:	8f 91       	pop	r24
  7c:	2f 91       	pop	r18
  7e:	0f 90       	pop	r0
  80:	0f be       	out	0x3f, r0	; 63
  82:	0f 90       	pop	r0
  84:	1f 90       	pop	r1
  86:	18 95       	reti

00000088 <Setup>:

void Setup() {
	
	// LEDs on PB2, PB3.
	DDRB =  0b00011101;
  88:	8d e1       	ldi	r24, 0x1D	; 29
  8a:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00100010;
  8c:	82 e2       	ldi	r24, 0x22	; 34
  8e:	88 bb       	out	0x18, r24	; 24
	
	// Analog comparator OFF.
	ACSR |= (1 << ACD);
  90:	47 9a       	sbi	0x08, 7	; 8
	
	// Start timer T0 with prescaler 8.
	TCCR0B |= (1<<CS01);
  92:	83 b7       	in	r24, 0x33	; 51
  94:	82 60       	ori	r24, 0x02	; 2
  96:	83 bf       	out	0x33, r24	; 51
	
	// Enable time T0 overflow interrupt.
	TIMSK0 |= (1<<OCIE0A);
  98:	89 b7       	in	r24, 0x39	; 57
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	89 bf       	out	0x39, r24	; 57
	
	// Enable CTC Mode.
	TCCR0A |= (1<<WGM01);
  9e:	8f b5       	in	r24, 0x2f	; 47
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	8f bd       	out	0x2f, r24	; 47
	
	// T0 will overflow each 1 ms.
	OCR0A = 150;
  a4:	86 e9       	ldi	r24, 0x96	; 150
  a6:	86 bf       	out	0x36, r24	; 54
	
	// Reset timer T0 flags.
	TIFR0 = 0;
  a8:	18 be       	out	0x38, r1	; 56
  aa:	08 95       	ret

000000ac <Start_Blinking>:
	
}

void Start_Blinking() {
	
	if (led_on_flag)
  ac:	80 91 60 00 	lds	r24, 0x0060
  b0:	88 23       	and	r24, r24
  b2:	11 f0       	breq	.+4      	; 0xb8 <Start_Blinking+0xc>
	{
		PORTB set(LED);
  b4:	c2 9a       	sbi	0x18, 2	; 24
  b6:	08 95       	ret
	}
	else
	{
		PORTB clr(LED);
  b8:	c2 98       	cbi	0x18, 2	; 24
  ba:	08 95       	ret

000000bc <main>:
	
}

int main(void)
{
	Setup();
  bc:	e5 df       	rcall	.-54     	; 0x88 <Setup>
	sei();
  be:	78 94       	sei
	
	while(1)
	{
		Start_Blinking();	
  c0:	f5 df       	rcall	.-22     	; 0xac <Start_Blinking>
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <main+0x4>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
