
Blinking_Duty_Ratio_Rev_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000012a  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800062  00800062  000001c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000178  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000c0  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000114  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000079  00000000  00000000  00000797  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ea e2       	ldi	r30, 0x2A	; 42
  24:	f1 e0       	ldi	r31, 0x01	; 1
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a2 36       	cpi	r26, 0x62	; 98
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a2 e6       	ldi	r26, 0x62	; 98
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a8 36       	cpi	r26, 0x68	; 104
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	6d d0       	rcall	.+218    	; 0x11e <main>
  44:	70 c0       	rjmp	.+224    	; 0x126 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_6>:
#define set(x)	|= (1<<x)
#define clr(x)	&=~(1<<x)

#define LED PB2

ISR (TIM0_COMPA_vect) {
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	2f 93       	push	r18
  54:	3f 93       	push	r19
  56:	8f 93       	push	r24
  58:	9f 93       	push	r25
	
	timer_counter++;
  5a:	80 91 64 00 	lds	r24, 0x0064
  5e:	90 91 65 00 	lds	r25, 0x0065
  62:	01 96       	adiw	r24, 0x01	; 1
  64:	90 93 65 00 	sts	0x0065, r25
  68:	80 93 64 00 	sts	0x0064, r24
	
	if ((timer_counter >= duty_cycle) && (!state))
  6c:	20 91 60 00 	lds	r18, 0x0060
  70:	30 91 61 00 	lds	r19, 0x0061
  74:	82 17       	cp	r24, r18
  76:	93 07       	cpc	r25, r19
  78:	78 f1       	brcs	.+94     	; 0xd8 <__stack+0x39>
  7a:	80 91 62 00 	lds	r24, 0x0062
  7e:	81 11       	cpse	r24, r1
  80:	1b c0       	rjmp	.+54     	; 0xb8 <__stack+0x19>
	{
		timer_counter = 0;
  82:	10 92 65 00 	sts	0x0065, r1
  86:	10 92 64 00 	sts	0x0064, r1
		prev_duty_cycle = duty_cycle;
  8a:	30 93 67 00 	sts	0x0067, r19
  8e:	20 93 66 00 	sts	0x0066, r18
		int period = 1000;
		duty_cycle = period - duty_cycle;
  92:	88 ee       	ldi	r24, 0xE8	; 232
  94:	93 e0       	ldi	r25, 0x03	; 3
  96:	82 1b       	sub	r24, r18
  98:	93 0b       	sbc	r25, r19
  9a:	90 93 61 00 	sts	0x0061, r25
  9e:	80 93 60 00 	sts	0x0060, r24
		state = 1;
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	20 93 62 00 	sts	0x0062, r18
		led_flag = 1;
  a8:	20 93 63 00 	sts	0x0063, r18
	}
	
	if ((timer_counter >= duty_cycle) && (state))
  ac:	18 16       	cp	r1, r24
  ae:	19 06       	cpc	r1, r25
  b0:	98 f0       	brcs	.+38     	; 0xd8 <__stack+0x39>
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	88 23       	and	r24, r24
  b6:	81 f0       	breq	.+32     	; 0xd8 <__stack+0x39>
	{
		timer_counter = 0;
  b8:	10 92 65 00 	sts	0x0065, r1
  bc:	10 92 64 00 	sts	0x0064, r1
		duty_cycle = prev_duty_cycle;
  c0:	80 91 66 00 	lds	r24, 0x0066
  c4:	90 91 67 00 	lds	r25, 0x0067
  c8:	90 93 61 00 	sts	0x0061, r25
  cc:	80 93 60 00 	sts	0x0060, r24
		state = 0;
  d0:	10 92 62 00 	sts	0x0062, r1
		led_flag = 0;
  d4:	10 92 63 00 	sts	0x0063, r1
	}
	
	
}
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	3f 91       	pop	r19
  de:	2f 91       	pop	r18
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <Setup>:

void Setup() {
	
	// LEDs on PB2, PB3.
	DDRB =  0b00011101;
  ea:	8d e1       	ldi	r24, 0x1D	; 29
  ec:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00100010;
  ee:	82 e2       	ldi	r24, 0x22	; 34
  f0:	88 bb       	out	0x18, r24	; 24
	
	// Analog comparator OFF.
	ACSR |= (1 << ACD);
  f2:	47 9a       	sbi	0x08, 7	; 8
	
	// Start timer T0 with prescaler 8.
	TCCR0B |= (1<<CS01);
  f4:	83 b7       	in	r24, 0x33	; 51
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	83 bf       	out	0x33, r24	; 51
	
	// Enable time T0 overflow interrupt.
	TIMSK0 |= (1<<OCIE0A);
  fa:	89 b7       	in	r24, 0x39	; 57
  fc:	84 60       	ori	r24, 0x04	; 4
  fe:	89 bf       	out	0x39, r24	; 57
	
	// Enable CTC Mode.
	TCCR0A |= (1<<WGM01);
 100:	8f b5       	in	r24, 0x2f	; 47
 102:	82 60       	ori	r24, 0x02	; 2
 104:	8f bd       	out	0x2f, r24	; 47
	
	// T0 will overflow each 1 ms.
	OCR0A = 150;
 106:	86 e9       	ldi	r24, 0x96	; 150
 108:	86 bf       	out	0x36, r24	; 54
	
	// Reset timer T0 flags.
	TIFR0 = 0;
 10a:	18 be       	out	0x38, r1	; 56
 10c:	08 95       	ret

0000010e <Start_Blinking>:
	
}

void Start_Blinking() {
	
	if (led_flag)
 10e:	80 91 63 00 	lds	r24, 0x0063
 112:	88 23       	and	r24, r24
 114:	11 f0       	breq	.+4      	; 0x11a <Start_Blinking+0xc>
	{
		PORTB clr(LED);
 116:	c2 98       	cbi	0x18, 2	; 24
 118:	08 95       	ret
	}
	else
	{
		PORTB set(LED);
 11a:	c2 9a       	sbi	0x18, 2	; 24
 11c:	08 95       	ret

0000011e <main>:
	
}

int main(void)
{
	Setup();
 11e:	e5 df       	rcall	.-54     	; 0xea <Setup>
	sei();
 120:	78 94       	sei
	
	while(1)
	{
		Start_Blinking();
 122:	f5 df       	rcall	.-22     	; 0x10e <Start_Blinking>
 124:	fe cf       	rjmp	.-4      	; 0x122 <main+0x4>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
